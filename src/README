rerstin127
342851276

I have preferred to implement this project with inheritance from DanoGameLab classes:
1) BrickerGameManager inheritances from GameManager
2) All of game objects (ball, brick, paddle, counters) inheritances from GameObject
it allows to use an API of parent claas and also append own functionality to extend opportunities of classes.

Also I used Object Composition (for example gameObjectsCollection in GraphicLivesCounter)
in order to extend opportunities of class without using inheritance, because I can to inheritance only from one class.

It unnecessary to use here factory because we use all of game objects in project.

Description of class DownInvisibleBorder.java:
Firstly, I was removing a objects like mock balls and status objects using loop in main class.
Dit indeed is not a rational way. For ecample in order to remove mock ball that went away of borders of the game,
we need to check all game object in game object collection. It is not efficient process.
So I decide to use a new class tht represents an invisible down border that remove all object (except main ball),
that fall to It.
It a little bit disturb a single chose principle, but allow to perform more efficient removing.

Algorithms:
1. alotStudyTime.
Description of algorithm:
1) Sorting of arrays
2) Going in loop over array and checking which tasks can be performed.
The most rational way to perform task i is to perform It in min timeSlot (|min(task[i]-timeSlots[j]|).
It allows know how to perform the biggest number of tasks.
It not a good way to calculate all options of |min(task[i]-timeSlots[j]|, so sorting will help here.
The most rational timeSlot for task "i" is a first timeSlot that not smaller than task "i" (timeSlot j).
So I take this timeSlot j, increment a number of performed task and go to search the most
rational timeSlot for next task.
Because also a tasks array is sorted, for each task I will be able to find the most rational
timeSlot and therefore perform a maximum .
This algorithm will take N log(N) time (N = max(n,m)).

2. minLeap
This algorithm of The Shortest Path type algorithms. It acts in next way:
1) Initialize an array with len(leapNum) elements.
Each element (i) in this array will be a minimum number of required jumps to arrive to leaf(i) for leaf(1).
Each element (except first = 0) will be initialized with MaxValue.
2) Go over each leapNum[i] and develop a new array, for example: if with leaf(i) we can arrive to leaf(j)
more than in jumpsToLeaf[j] will be number of jump of path that include leaf(j).
3) return a jumpsToLeaf[jumpsToLeaf.length - 1] that exactly represent a required number.
Correctness:
In order to find the shortest path we need to check all possible paths.
It is actually what we do. We compute a length of the shortest path to each leaf,
and in this way we check all possible paths to leaf(n) and search the shortest.
Run Time:
Outward loop has n iterations in which iterations we have leapNum[i] times of constant time in each one.
So in total we have O(leapNum[0] + ... + leapNum[n]).
in worth case it will be O(n^2), but average we will have a linear run time.

3. bucketWalk
Description of algorithm:
1) calculation a Fibonacci(n)
Correctness:
Dived a problem to sub problems: We can see that we can solve a problem with n liters in the following way:
we can add a number of possible way for getting n - 1 and n - 2 liters.
This claim is correct, because each time tha we increase a number of liters,
we append possible wal with one liter and with two liters.
So we can go and take one liter and receive a sub problem with n - 1 liters.
Or we can go and take two liters and receive a sub problem with n - 2 liters.
And It is actually Fibonacci sequence.
Runtime:
We have loop with n iteration with constant runtime in each one. So O(n).

4. numTrees
Description of algorithm:
1) calculate an n'th Catalan's number.
Correctness:
Define F(i,n) is the number of unique BST, where the number i is served as the root of BST
(1 is less than or equal to i which is less than or equal to n).
G(n) = F(1,n)+...+f(i,n)+...+F(n,n) if a number of unique BST.
When we choose a root Node, we divide our problem to left subtree similar problem
and right subtree similar problem.
We notice that F(i, n) = G(i - 1) * G(n - i),
because to calculate number of unique BST with node i in the root, we have to multiply all possibilities in
left and right subtrees.
So in total we have:
G(n) = G(0) * G(n) + ... + G(n - 1) * G(0)
And it is exactly Catalan(n).
Runtime:
We have a 2 + 3 + 4 + ... + n iteration with constant amount ow work.
In total, we will receive O(n^2).

